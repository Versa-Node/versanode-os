name: Build & Release (pi-gen)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to build (branch or tag)"
        default: "main"
        required: true
      release:
        description: "Publish GitHub Release?"
        type: boolean
        default: true
      upload_artifacts:
        description: "Upload build artifacts?"
        type: boolean
        default: true
      arch:
        description: "Architecture (arm64 only here)"
        default: "arm64"
        required: true
      release_codename:
        description: "Raspberry Pi OS release (bookworm or trixie)"
        default: "trixie"
        required: true
      variant:
        description: "Image size (lite|normal|full)"
        default: "lite"
        required: true

concurrency:
  group: pigen-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Free up disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Extra prune & show free space
        run: |
          docker system prune -af || true
          sudo rm -rf /usr/local/lib/android /opt/ghc /usr/share/dotnet /opt/hostedtoolcache || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          df -h

      - name: Checkout this repo (with submodules)
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          submodules: recursive
          fetch-depth: 0

      - name: Install pi-gen host dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            coreutils quilt parted qemu-user-static debootstrap zerofree zip dosfstools e2fsprogs \
            libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc gpg pigz xxd bmap-tools \
            kpartx kmod arch-test ca-certificates

      - name: Verify pi-gen submodule (should be arm64 branch)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d pi-gen ]; then
            echo "ERROR: pi-gen submodule missing" >&2
            exit 2
          fi
          echo "pi-gen commit: $(git -C pi-gen rev-parse --short HEAD)"
          echo "pi-gen branch (if set): $(git -C pi-gen rev-parse --abbrev-ref HEAD || true)"
          ls -la pi-gen | sed -n '1,80p'

      - name: Write config (used by scripts/build.sh)
        shell: bash
        run: |
          set -euo pipefail
          : > config
          echo "ARCH=arm64" >> config
          echo "RELEASE=${{ inputs.release_codename }}" >> config
          echo "ENABLE_SSH=1" >> config
          echo "FIRST_USER_NAME=pi" >> config
          echo "FIRST_USER_PASS=raspberry" >> config
          echo "DISABLE_FIRST_BOOT_USER_RENAME=1" >> config
          echo "DEBIAN_FRONTEND=noninteractive" >> config
          echo "APT_LISTCHANGES_FRONTEND=none" >> config
          echo "DEPLOY_COMPRESSION=xz" >> config
          echo "COMPRESSION_LEVEL=6" >> config
          echo "DEPLOY_ZIP=0" >> config
          echo "USE_QEMU=1" >> config
          echo "IMG_NAME=versanode-os" >> config
          echo "DEPLOY_MINIMIZEFS=0" >> config
          echo "ROOT_MARGIN=256" >> config
          case "${{ inputs.variant }}" in
            lite)   STAGES="stage0 stage1 stage2 export-image"; SIZE=4096 ;;
            normal) STAGES="stage0 stage1 stage2 stage3 stage4 export-image"; SIZE=6144 ;;
            full)   STAGES="stage0 stage1 stage2 stage3 stage4 stage5 export-image"; SIZE=8192 ;;
            *) echo "Unknown variant"; exit 1 ;;
          esac
          echo "STAGE_LIST=\"${STAGES}\"" >> config
          echo "TARGET_IMAGE_SIZE=${SIZE}" >> config
          echo "---- CONFIG ----"
          cat config

      - name: Make repo scripts executable
        shell: bash
        run: |
          chmod +x ./scripts/build.sh || true
          # fetch_pi_gen.sh not used (submodule only)

      - name: Build image (via repo wrapper)
        shell: bash
        env:
          PI_GEN_DEBUG: "1"
        run: |
          set -euo pipefail
          ./scripts/build.sh

      - name: Show deploy contents (sanity check)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d pi-gen/deploy ]; then
            echo "pi-gen/deploy contents:"
            ls -lah pi-gen/deploy
          else
            echo "WARNING: pi-gen/deploy not found"
          fi

      - name: Collect artifacts into ./artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          shopt -s nullglob
          for f in pi-gen/deploy/*.img.xz pi-gen/deploy/*.bmap pi-gen/deploy/*.sha256; do
            [ -e "$f" ] || continue
            cp -v "$f" artifacts/
          done
          if [ -z "$(ls -A artifacts || true)" ]; then
            echo "No artifacts found in pi-gen/deploy"; exit 1
          fi
          sudo chown -R "$USER":"$(id -gn)" artifacts
          echo "Artifacts collected:"
          ls -lah artifacts

      - name: Upload artifacts (.img.xz)
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: versanode-os-${{ inputs.release_codename }}-${{ inputs.arch }}-${{ inputs.variant }}
          path: artifacts/*
          if-no-files-found: error
          compression-level: 9

      - name: Create GitHub Release (attach image)
        if: ${{ inputs.release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "versanode-os ${{ inputs.release_codename }} (${{ inputs.arch }}) â€” ${{ inputs.variant }}"
          draft: false
          prerelease: false
          tag_name: "build-${{ github.run_number }}"
          files: artifacts/*
          body: |
            Automated build of **versanode-os**
            - Release: ${{ inputs.release_codename }}
            - Arch: ${{ inputs.arch }}
            - Variant: ${{ inputs.variant }}
            - Run: ${{ github.run_id }}
