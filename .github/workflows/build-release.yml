name: VersaNode OS Build & Release (pi-gen)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to build (branch or tag)"
        default: "main"
        required: true
      release:
        description: "Publish GitHub Release?"
        type: boolean
        default: true
      upload_artifacts:
        description: "Upload build artifacts?"
        type: boolean
        default: true

concurrency:
  group: versanode-os-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🧹 Free up disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: 🧽 Extra prune & show free space
        run: |
          docker system prune -af || true
          sudo rm -rf /usr/local/lib/android /opt/ghc /usr/share/dotnet /opt/hostedtoolcache || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          df -h

      - name: 📦 Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          submodules: recursive
          fetch-depth: 0

      - name: ⚙️ Install pi-gen host dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            coreutils quilt parted qemu-user-static debootstrap zerofree zip dosfstools e2fsprogs \
            libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc gpg pigz xxd bmap-tools \
            kpartx kmod arch-test ca-certificates

      - name: 🔍 Verify submodules and root config presence
        run: |
          set -euo pipefail
          [ -d pi-gen ] || { echo "pi-gen missing"; exit 2; }
          [ -d versanode-os-kmods ] || { echo "versanode-os-kmods missing"; exit 3; }
          [ -d versanode-os-usermods ] || { echo "versanode-os-usermods missing"; exit 4; }
          echo "✅ pi-gen, kmods, usermods present."
          if [ -f config ]; then
            echo "---- repo-root config (preview) ----"
            sed -n '1,200p' config
          else
            echo "ℹ️ repo-root config not found; will synthesize config.ci"
          fi

      - name: 🧩 Inject custom stages into pi-gen
        run: |
          set -euo pipefail
          rm -rf pi-gen/stage8 pi-gen/stage9
          cp -a versanode-os-kmods    pi-gen/stage8
          cp -a versanode-os-usermods pi-gen/stage9
          echo "✅ Injected versanode-os-kmods -> stage8"
          echo "✅ Injected versanode-os-usermods -> stage9"

          # Prevent early exports from stock stages (export only once at the end)
          touch pi-gen/stage3/SKIP || true
          touch pi-gen/stage4/SKIP || true
          touch pi-gen/stage5/SKIP || true
          touch pi-gen/stage2/SKIP_IMAGES || true
          touch pi-gen/stage4/SKIP_IMAGES || true
          touch pi-gen/stage5/SKIP_IMAGES || true

          # Ensure final export happens after our custom stage9
          cat > pi-gen/stage9/EXPORT_IMAGE <<'EOF'
          IMG_SUFFIX=""
          if [ "${USE_QEMU}" = "1" ]; then
            IMG_SUFFIX="${IMG_SUFFIX}-qemu"
          fi
          EOF

      - name: 🛠️ Normalize line endings & ensure exec bits (stage8 & stage9)
        run: |
          set -euo pipefail
          for s in stage8 stage9; do
            d="pi-gen/$s"
            [ -d "$d" ] || { echo "Missing $d"; exit 6; }

            # Fix CRLF on shell scripts
            find "$d" -type f \( -name 'prerun.sh' -o -name '*-run.sh' -o -name '*-run-chroot.sh' \) \
              -exec sed -i 's/\r$//' {} \;

            # Ensure executables
            [ -f "$d/prerun.sh" ] && chmod +x "$d/prerun.sh" || true
            find "$d" -maxdepth 2 -type f -name '*-run.sh' -exec chmod +x {} \;
            find "$d" -maxdepth 2 -type f -name '*-run-chroot.sh' -exec chmod +x {} \;

            echo "---- $s directory listing ----"
            ls -l "$d" || true
          done

      - name: 🧾 Prepare pi-gen/config (source of truth)
        run: |
          set -euo pipefail

          if [ -f config ]; then
            echo "Using repo-root ./config"
            CONFIG_SRC=config
          else
            echo "Synthesizing config.ci with VersaNode defaults"
            cat > config.ci <<'EOF'
            # Core
            IMG_NAME=${IMG_NAME:-versanode-os}
            RELEASE=${RELEASE:-trixie}
            ARCH=${ARCH:-arm64}
            STAGE_LIST="${STAGE_LIST:-stage0 stage1 stage2 stage8 stage9 export-image}"

            # Emulation & compression
            USE_QEMU=${USE_QEMU:-1}
            DEPLOY_COMPRESSION=${DEPLOY_COMPRESSION:-xz}
            COMPRESSION_LEVEL=${COMPRESSION_LEVEL:-6}

            # Defaults (safe for unattended CI)
            ENABLE_SSH=${ENABLE_SSH:-1}
            PUBKEY_ONLY_SSH=${PUBKEY_ONLY_SSH:-0}
            FIRST_USER_NAME=${FIRST_USER_NAME:-versanode}
            FIRST_USER_PASS=${FIRST_USER_PASS:-versanode}
            TARGET_HOSTNAME=${TARGET_HOSTNAME:-versanode}
            DISABLE_FIRST_BOOT_USER_RENAME=${DISABLE_FIRST_BOOT_USER_RENAME:-1}
            DEBIAN_FRONTEND=${DEBIAN_FRONTEND:-noninteractive}
            APT_LISTCHANGES_FRONTEND=${APT_LISTCHANGES_FRONTEND:-none}
            EOF
            CONFIG_SRC=config.ci
          fi

          # Place the chosen config where pi-gen will read it, and make sure chroots can read it
          cp -v "$CONFIG_SRC" pi-gen/config
          chmod 644 pi-gen/config

          echo "---- effective pi-gen/config ----"
          sed -n '1,200p' pi-gen/config

      - name: 🔎 Show build.sh defaults (diagnostic)
        run: |
          set -euo pipefail
          echo "---- build.sh ARCH/RELEASE defaults ----"
          nl -ba pi-gen/build.sh | sed -n '170,200p' | sed -n '1,40p' | grep -E 'ARCH=|RELEASE=|IMG_NAME=' -n || true

      - name: 🧾 Show STAGE_LIST from pi-gen/config (sanity)
        run: |
          set -euo pipefail
          echo "Configured STAGE_LIST:"
          grep -E '^\s*STAGE_LIST=' pi-gen/config || true

      - name: 🏗️ Run pi-gen build (explicitly use pi-gen/config)
        env:
          PI_GEN_DEBUG: "1"
        run: |
          set -euo pipefail
          cd pi-gen
          sudo -E bash ./build.sh -c ./config

      - name: 📂 Collect build artifacts
        run: |
          mkdir -p artifacts
          cp -v pi-gen/deploy/*.{img,img.xz,bmap,sha256,zip} artifacts/ 2>/dev/null || true
          ls -lh artifacts || true

      - name: ⬆️ Upload artifacts
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: versanode-os-build-${{ github.run_number }}
          path: artifacts/*

      - name: 🚀 Create GitHub Release
        if: ${{ inputs.release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "VersaNode OS build ${{ github.run_number }}"
          tag_name: "build-${{ github.run_number }}"
          files: artifacts/*
          body: |
            Automated build of **VersaNode OS**
            - Ref: ${{ inputs.ref }}
            - Run ID: ${{ github.run_id }}
