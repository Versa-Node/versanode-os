# ------------------------------------------------------------------------------
# Build & Release (pi-gen) — MANUAL
#
# WHAT THIS WORKFLOW DOES
# -----------------------
# 1) You run it manually (Workflow Dispatch) and choose:
#      - Git ref to build (branch or tag from THIS repo)
#      - Raspberry Pi OS release (bookworm/trixie)
#      - Architecture (arm64/armhf)
#      - Variant (lite/normal/full)
#      - Whether to upload artifacts and/or create a GitHub Release
#
# 2) It prepares a pi-gen config (config.effective) with your inputs:
#      - Forces noninteractive build, enables SSH, sets arch/release, etc.
#      - Sets DEPLOY_COMPRESSION=xz so the output is a compact .img.xz
#      - Sets STAGE_LIST according to the chosen variant (lite/normal/full)
#
# 3) It builds the image using pi-gen’s Docker wrapper:
#      - Uses ./pi-gen if it exists (submodule or committed)
#      - If missing, it clones the correct pi-gen branch (arm64 -> arm64, armhf -> master)
#
# 4) It uploads the resulting image(s) from pi-gen/deploy/*.img.xz as GitHub
#    Actions artifacts. (If compression somehow differs, add *.img.gz or *.zip
#    to the artifact path.)
#
# 5) (Optional) It creates a GitHub Release and attaches the produced image(s).
#
# NOTES
# -----
# - This workflow frees a lot of disk space up-front to avoid running out on
#   GitHub-hosted runners.
# - If you rely on custom pi-gen stages, make sure they are present under ./pi-gen.
# - If you need incremental builds, remove CLEAN=1 from the build step and/or
#   keep the container by using PRESERVE_CONTAINER=1 CONTINUE=1.
# ------------------------------------------------------------------------------

name: Build & Release (pi-gen)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to build (branch or tag)"
        default: "main"
        required: true
      release:
        description: "Publish GitHub Release?"
        type: boolean
        default: true
      upload_artifacts:
        description: "Upload build artifacts?"
        type: boolean
        default: true
      arch:
        description: "Architecture (arm64 or armhf)"
        default: "arm64"
        required: true
      release_codename:
        description: "Raspberry Pi OS release (bookworm/trixie)"
        default: "trixie"
        required: true
      variant:
        description: "Image size (lite|normal|full)"
        default: "lite"
        required: true

concurrency:
  group: pigen-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Reclaim space on the runner (pi-gen builds are large)
      - name: Maximize disk space (remove SDKs, caches, Docker images)
        uses: jlumbroso/free-disk-space@v1.3.0
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Extra prune & show free space
        run: |
          docker system prune -af || true
          sudo rm -rf /usr/local/lib/android /opt/ghc /usr/share/dotnet /opt/hostedtoolcache || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          df -h

      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU (for cross-arch emulation inside Docker)
        uses: docker/setup-qemu-action@v3

      # Ensure we have pi-gen folder; if missing, clone the proper branch
      - name: Ensure pi-gen exists (clone if not present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "pi-gen" ]; then
            echo "Found existing ./pi-gen"
            exit 0
          fi
          BRANCH="master"
          if [ "${{ inputs.arch }}" = "arm64" ]; then
            BRANCH="arm64"
          fi
          echo "Cloning RPi-Distro/pi-gen branch: ${BRANCH}"
          git clone --depth 1 --branch "${BRANCH}" https://github.com/RPi-Distro/pi-gen.git

      - name: Prepare effective config (apply inputs)
        shell: bash
        run: |
          set -euo pipefail
          cp -f config config.effective 2>/dev/null || : > config.effective
          # Hard defaults to keep builds noninteractive and consistent
          grep -q '^ARCH=' config.effective || echo 'ARCH=arm64' >> config.effective
          grep -q '^RELEASE=' config.effective || echo 'RELEASE=bookworm' >> config.effective
          grep -q '^ENABLE_SSH=' config.effective || echo 'ENABLE_SSH=1' >> config.effective
          grep -q '^FIRST_USER_NAME=' config.effective || echo 'FIRST_USER_NAME=pi' >> config.effective
          grep -q '^FIRST_USER_PASS=' config.effective || echo 'FIRST_USER_PASS=raspberry' >> config.effective
          grep -q '^DISABLE_FIRST_BOOT_USER_RENAME=' config.effective || echo 'DISABLE_FIRST_BOOT_USER_RENAME=1' >> config.effective
          grep -q '^DEBIAN_FRONTEND=' config.effective || echo 'DEBIAN_FRONTEND=noninteractive' >> config.effective
          grep -q '^APT_LISTCHANGES_FRONTEND=' config.effective || echo 'APT_LISTCHANGES_FRONTEND=none' >> config.effective

          # Always produce .img.xz to save space
          sed -i '/^DEPLOY_COMPRESSION=/d' config.effective
          echo 'DEPLOY_COMPRESSION=xz' >> config.effective
          grep -q '^COMPRESSION_LEVEL=' config.effective || echo 'COMPRESSION_LEVEL=6' >> config.effective

          # Inputs -> config
          sed -i "s/^ARCH=.*/ARCH=${{ inputs.arch }}/" config.effective
          sed -i "s/^RELEASE=.*/RELEASE=${{ inputs.release_codename }}/" config.effective

          # Variant -> stages
          case "${{ inputs.variant }}" in
            lite)   STAGES="stage0 stage1 stage2 export-image" ;;
            normal) STAGES="stage0 stage1 stage2 stage3 stage4 export-image" ;;
            full)   STAGES="stage0 stage1 stage2 stage3 stage4 stage5 export-image" ;;
            *)      echo "Unknown variant: ${{ inputs.variant }}"; exit 1 ;;
          esac
          sed -i '/^STAGE_LIST=/d' config.effective
          echo "STAGE_LIST=\"${STAGES}\"" >> config.effective

          echo "---- EFFECTIVE CONFIG ----"
          cat config.effective

      # Build using pi-gen's Docker wrapper, passing our config
      - name: Build image with pi-gen (Docker)
        working-directory: pi-gen
        shell: bash
        run: |
          set -euo pipefail
          # CLEAN=1 ensures a fresh build. Remove if you want to reuse state.
          sudo CLEAN=1 ./build-docker.sh -c ../config.effective

      - name: Show deploy contents
        shell: bash
        run: |
          echo "Contents of pi-gen/deploy:"
          ls -lah pi-gen/deploy || true

      # Remove the big work dir before uploading to avoid hitting limits
      - name: Remove work dir and show free space
        shell: bash
        run: |
          du -sh pi-gen/work || true
          sudo rm -rf pi-gen/work || true
          df -h

      - name: Upload artifacts (.img.xz)
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: versanode-os-${{ inputs.release_codename }}-${{ inputs.arch }}-${{ inputs.variant }}
          path: |
            pi-gen/deploy/*.img.xz
          if-no-files-found: error
          compression-level: 9

      - name: Create GitHub Release (attach .img.xz)
        if: ${{ inputs.release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "versanode-os ${{ inputs.release_codename }} (${{ inputs.arch }}) — ${{ inputs.variant }}"
          draft: false
          prerelease: false
          tag_name: "build-${{ github.run_number }}"
          files: |
            pi-gen/deploy/*.img.xz
