name: VersaNode OS Build & Release (pi-gen)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to build (branch or tag)"
        default: "main"
        required: true

      # Publish & artifacts
      publish_release:
        description: "Publish GitHub Release?"
        type: boolean
        default: true
      upload_artifacts:
        description: "Upload build artifacts?"
        type: boolean
        default: true

      # ---- pi-gen config knobs (your defaults) ----
      IMG_NAME:
        description: "Image name"
        default: "versanode-os"
        required: true
      RELEASE_CODENAME:
        description: "Debian/RPiOS codename"
        default: "trixie"
        required: true
      ARCH:
        description: "Target architecture"
        default: "arm64"
        required: true

      ENABLE_SSH:
        description: "Enable SSH (1/0)"
        default: "1"
        required: true
      PUBKEY_ONLY_SSH:
        description: "SSH pubkey-only (1/0)"
        default: "0"
        required: true
      FIRST_USER_NAME:
        description: "First user name"
        default: "versanode"
        required: true
      FIRST_USER_PASS:
        description: "First user password"
        default: "versanode"
        required: true
      TARGET_HOSTNAME:
        description: "Hostname"
        default: "versanode"
        required: true
      DISABLE_FIRST_BOOT_USER_RENAME:
        description: "Disable first-boot rename (1/0)"
        default: "1"
        required: true

      DEBIAN_FRONTEND:
        description: "Debconf frontend"
        default: "noninteractive"
        required: true
      APT_LISTCHANGES_FRONTEND:
        description: "apt-listchanges frontend"
        default: "none"
        required: true

      STAGE_LIST:
        description: "Stage list"
        default: "stage0 stage1 stage2 stage8 stage9"
        required: true

      USE_QEMU:
        description: "Use QEMU (1/0)"
        default: "1"
        required: true
      DEPLOY_COMPRESSION:
        description: "Deploy compression (xz/zip/none)"
        default: "xz"
        required: true
      COMPRESSION_LEVEL:
        description: "Compression level"
        default: "6"
        required: true

      PUBKEY_SSH_FIRST_USER:
        description: "SSH public key for FIRST_USER (optional)"
        default: ""
        required: false

concurrency:
  group: versanode-os-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🧹 Free up disk space (optimized)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: false
          dotnet: true
          haskell: false
          large-packages: false
          docker-images: true
          swap-storage: false

      - name: 📦 Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          submodules: recursive
          fetch-depth: 0

      - name: ⚙️ Install pi-gen host dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            coreutils quilt parted qemu-user-static debootstrap zerofree zip dosfstools e2fsprogs \
            libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc gpg pigz xxd bmap-tools \
            kpartx kmod arch-test ca-certificates

      - name: 🔍 Verify submodules present
        run: |
          set -euo pipefail
          [ -d pi-gen ] || { echo "pi-gen missing"; exit 2; }
          [ -d versanode-os-kmods ] || { echo "versanode-os-kmods missing"; exit 3; }
          [ -d versanode-os-usermods ] || { echo "versanode-os-usermods missing"; exit 4; }
          echo "✅ Submodules present."

      - name: 🧩 Inject custom stages into pi-gen
        run: |
          set -euo pipefail
          rm -rf pi-gen/stage8 pi-gen/stage9
          cp -a versanode-os-kmods    pi-gen/stage8
          cp -a versanode-os-usermods pi-gen/stage9
          echo "✅ Injected versanode-os-kmods -> stage8"
          echo "✅ Injected versanode-os-usermods -> stage9"

          # Skip desktop stages; export only once at the end
          touch pi-gen/stage3/SKIP || true
          touch pi-gen/stage4/SKIP || true
          touch pi-gen/stage5/SKIP || true
          touch pi-gen/stage2/SKIP_IMAGES || true
          touch pi-gen/stage4/SKIP_IMAGES || true
          touch pi-gen/stage5/SKIP_IMAGES || true

          # Ensure final export (stage9)
          cat > pi-gen/stage9/EXPORT_IMAGE <<'EOF'
          IMG_SUFFIX=""
          if [ "${USE_QEMU}" = "1" ]; then
            IMG_SUFFIX="${IMG_SUFFIX}-qemu"
          fi
          EOF

      - name: 🛠️ Normalize line endings & exec bits (stage8 & stage9)
        run: |
          set -euo pipefail
          for s in stage8 stage9; do
            d="pi-gen/$s"
            [ -d "$d" ] || { echo "Missing $d"; exit 6; }

            find "$d" -type f \( -name 'prerun.sh' -o -name '*-run.sh' -o -name '*-run-chroot.sh' \) \
              -exec sed -i 's/\r$//' {} \;

            [ -f "$d/prerun.sh" ] && chmod +x "$d/prerun.sh" || true
            find "$d" -maxdepth 2 -type f -name '*-run.sh' -exec chmod +x {} \;
            find "$d" -maxdepth 2 -type f -name '*-run-chroot.sh' -exec chmod +x {} \;

            echo "---- $s directory listing ----"
            ls -l "$d" || true
          done

      - name: 🩹 Make pi-gen defaults overridable
        working-directory: pi-gen
        run: |
          set -euo pipefail
          sed -i 's/\r$//' build.sh
          sed -i -E \
            -e 's/^export[[:space:]]+ARCH=([a-z0-9]+)$/export ARCH=${ARCH:-\1}/' \
            -e 's/^export[[:space:]]+RELEASE=([a-z0-9_-]+)[[:space:]]+#/export RELEASE=${RELEASE:-\1} #/' \
            -e 's/^export[[:space:]]+IMG_NAME="\$\{IMG_NAME:-raspios-\$RELEASE-\$ARCH\}"/export IMG_NAME=${IMG_NAME:-raspios-$RELEASE-$ARCH}/' \
            build.sh || true
          echo "---- build.sh ARCH/RELEASE lines ----"
          grep -nE 'export[[:space:]]+(ARCH|RELEASE|IMG_NAME)=' build.sh || true

      - name: 📝 Generate pi-gen config from inputs
        run: |
          set -euo pipefail
          cat > config.ci <<'EOF'
          IMG_NAME=${{ inputs.IMG_NAME }}
          RELEASE=${{ inputs.RELEASE_CODENAME }}
          ARCH=${{ inputs.ARCH }}

          ENABLE_SSH=${{ inputs.ENABLE_SSH }}
          PUBKEY_ONLY_SSH=${{ inputs.PUBKEY_ONLY_SSH }}
          FIRST_USER_NAME=${{ inputs.FIRST_USER_NAME }}
          FIRST_USER_PASS=${{ inputs.FIRST_USER_PASS }}
          TARGET_HOSTNAME=${{ inputs.TARGET_HOSTNAME }}
          DISABLE_FIRST_BOOT_USER_RENAME=${{ inputs.DISABLE_FIRST_BOOT_USER_RENAME }}
          PUBKEY_SSH_FIRST_USER=${{ inputs.PUBKEY_SSH_FIRST_USER }}

          DEBIAN_FRONTEND=${{ inputs.DEBIAN_FRONTEND }}
          APT_LISTCHANGES_FRONTEND=${{ inputs.APT_LISTCHANGES_FRONTEND }}

          STAGE_LIST="${{ inputs.STAGE_LIST }}"

          USE_QEMU=${{ inputs.USE_QEMU }}
          DEPLOY_COMPRESSION=${{ inputs.DEPLOY_COMPRESSION }}
          COMPRESSION_LEVEL=${{ inputs.COMPRESSION_LEVEL }}
          EOF
          sed -i 's/\r$//' config.ci
          echo "---- effective config.ci ----"
          sed -n '1,200p' config.ci

      - name: 🧾 Show STAGE_LIST (sanity)
        run: |
          set -euo pipefail
          echo "Configured STAGE_LIST:"
          grep -E '^\s*STAGE_LIST=' config.ci || true

      - name: 🏗️ Run pi-gen build (using config.ci)
        env:
          PI_GEN_DEBUG: "1"
        run: |
          set -euo pipefail
          cd pi-gen
          echo "==== pi-gen commit ===="
          git rev-parse --short HEAD || true
          echo "==== starting build ===="
          sudo -E bash ./build.sh -c ../config.ci

      - name: 📂 Collect build artifacts
        run: |
          mkdir -p artifacts
          cp -v pi-gen/deploy/*.{img,img.xz,bmap,sha256,zip} artifacts/ 2>/dev/null || true
          ls -lh artifacts || true

      - name: ⬆️ Upload artifacts
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: versanode-os-build-${{ github.run_number }}
          path: artifacts/*

      - name: 🚀 Create GitHub Release
        if: ${{ inputs.publish_release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "VersaNode OS build ${{ github.run_number }}"
          tag_name: "build-${{ github.run_number }}"
          files: artifacts/*
          body: |
            Automated build of **VersaNode OS**
            - Ref: ${{ inputs.ref }}
            - Run ID: ${{ github.run_id }}
