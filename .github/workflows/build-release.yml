# ------------------------------------------------------------------------------
# Build & Release (pi-gen) — MANUAL
#
# - Verifies export-image tools exist INSIDE the pi-gen container (bc, pigz, xxd,
#   bmap-tools, zerofree) before the long build.
# - Writes a robust config.effective to avoid empty vars during sizing.
# - Enables PI_GEN_DEBUG to surface computed sizes/paths.
# ------------------------------------------------------------------------------

name: Build & Release (pi-gen)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to build (branch or tag)"
        default: "main"
        required: true
      release:
        description: "Publish GitHub Release?"
        type: boolean
        default: true
      upload_artifacts:
        description: "Upload build artifacts?"
        type: boolean
        default: true
      arch:
        description: "Architecture (arm64 or armhf)"
        default: "arm64"
        required: true
      release_codename:
        description: "Raspberry Pi OS release (bookworm or trixie)"
        default: "trixie"
        required: true
      variant:
        description: "Image size (lite|normal|full)"
        default: "lite"
        required: true

concurrency:
  group: pigen-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Maximize disk space (remove SDKs, caches, Docker images)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Extra prune & show free space
        run: |
          docker system prune -af || true
          sudo rm -rf /usr/local/lib/android /opt/ghc /usr/share/dotnet /opt/hostedtoolcache || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          df -h

      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU (enable binfmt)
        uses: docker/setup-qemu-action@v3

      - name: Install host dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            qemu-user-static binfmt-support \
            quilt debootstrap libarchive-tools xz-utils kpartx dosfstools zip rsync \
            coreutils curl git ca-certificates gpg parted e2fsprogs

      - name: Ensure pi-gen exists (clone if not present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "pi-gen" ]; then
            echo "Found existing ./pi-gen"
            exit 0
          fi
          BRANCH="master"
          if [ "${{ inputs.arch }}" = "arm64" ]; then
            BRANCH="arm64"
          fi
          echo "Cloning RPi-Distro/pi-gen branch: ${BRANCH}"
          git clone --depth 1 --branch "${BRANCH}" https://github.com/RPi-Distro/pi-gen.git

      # Ensure export-image toolchain is present inside the container image we will build
      - name: Harden pi-gen Dockerfile with required tools (bc, zerofree, etc.)
        working-directory: pi-gen
        shell: bash
        run: |
          set -euo pipefail
          LINE='RUN apt-get update && apt-get install -y --no-install-recommends bc pigz xxd bmap-tools zerofree && rm -rf /var/lib/apt/lists/*'
          if ! grep -qE 'bc.*pigz.*xxd.*bmap-tools.*zerofree' Dockerfile; then
            {
              echo ""
              echo "# Ensured by CI to satisfy export-image sizing & compression tools"
              echo "${LINE}"
            } >> Dockerfile
          fi
          echo "Final Dockerfile tail:"
          tail -n 30 Dockerfile

      - name: Build pi-gen helper image and verify required tools
        working-directory: pi-gen
        shell: bash
        run: |
          set -euo pipefail
          IMG_TAG=pigen-helper:local
          docker build -t "${IMG_TAG}" .
          docker run --rm "${IMG_TAG}" sh -lc '
            set -e
            command -v bc >/dev/null && bc --version | head -1
            command -v pigz >/dev/null && pigz --version | head -1
            command -v xxd >/dev/null && xxd -v || true
            command -v bmaptool >/dev/null && bmaptool --version | head -1
            command -v zerofree >/dev/null && zerofree -V | head -1
          '

      - name: Prepare effective config (apply inputs)
        shell: bash
        run: |
          set -euo pipefail
          cp -f config config.effective 2>/dev/null || : > config.effective

          # Baseline defaults
          grep -q '^ARCH=' config.effective || echo 'ARCH=arm64' >> config.effective
          grep -q '^RELEASE=' config.effective || echo 'RELEASE=bookworm' >> config.effective
          grep -q '^ENABLE_SSH=' config.effective || echo 'ENABLE_SSH=1' >> config.effective
          grep -q '^FIRST_USER_NAME=' config.effective || echo 'FIRST_USER_NAME=pi' >> config.effective
          grep -q '^FIRST_USER_PASS=' config.effective || echo 'FIRST_USER_PASS=raspberry' >> config.effective
          grep -q '^DISABLE_FIRST_BOOT_USER_RENAME=' config.effective || echo 'DISABLE_FIRST_BOOT_USER_RENAME=1' >> config.effective
          grep -q '^DEBIAN_FRONTEND=' config.effective || echo 'DEBIAN_FRONTEND=noninteractive' >> config.effective
          grep -q '^APT_LISTCHANGES_FRONTEND=' config.effective || echo 'APT_LISTCHANGES_FRONTEND=none' >> config.effective

          # Always produce .img.xz and disable zip variant paths that can confuse older logic
          sed -i '/^DEPLOY_COMPRESSION=/d' config.effective
          echo 'DEPLOY_COMPRESSION=xz' >> config.effective
          sed -i '/^COMPRESSION_LEVEL=/d' config.effective
          echo 'COMPRESSION_LEVEL=6' >> config.effective
          sed -i '/^ZIP_COMPRESSION_LEVEL=/d' config.effective
          echo 'ZIP_COMPRESSION_LEVEL=6' >> config.effective
          sed -i '/^DEPLOY_ZIP=/d' config.effective
          echo 'DEPLOY_ZIP=0' >> config.effective

          # Cross-arch
          sed -i '/^USE_QEMU=/d' config.effective
          echo 'USE_QEMU=1' >> config.effective

          # Stable image name avoids empty-var path bugs in export-image
          sed -i '/^IMG_NAME=/d' config.effective
          echo 'IMG_NAME=versanode-os' >> config.effective

          # Sizing guards (prevent zero math)
          sed -i '/^DEPLOY_MINIMIZEFS=/d' config.effective
          echo 'DEPLOY_MINIMIZEFS=0' >> config.effective
          sed -i '/^ROOT_MARGIN=/d' config.effective
          echo 'ROOT_MARGIN=256' >> config.effective
          sed -i '/^TARGET_IMAGE_SIZE=/d' config.effective
          # Default for lite; bumped later for normal/full
          echo 'TARGET_IMAGE_SIZE=4096' >> config.effective

          # Apply inputs
          sed -i "s/^ARCH=.*/ARCH=${{ inputs.arch }}/" config.effective
          sed -i "s/^RELEASE=.*/RELEASE=${{ inputs.release_codename }}/" config.effective

          # Variant -> stages + size
          case "${{ inputs.variant }}" in
            lite)
              STAGES="stage0 stage1 stage2 export-image"
              SIZE=4096
              ;;
            normal)
              STAGES="stage0 stage1 stage2 stage3 stage4 export-image"
              SIZE=6144
              ;;
            full)
              STAGES="stage0 stage1 stage2 stage3 stage4 stage5 export-image"
              SIZE=8192
              ;;
            *)
              echo "Unknown variant: ${{ inputs.variant }}"; exit 1
              ;;
          esac
          sed -i '/^STAGE_LIST=/d' config.effective
          echo "STAGE_LIST=\"${STAGES}\"" >> config.effective
          sed -i "s/^TARGET_IMAGE_SIZE=.*/TARGET_IMAGE_SIZE=${SIZE}/" config.effective

          echo "---- EFFECTIVE CONFIG ----"
          cat config.effective

      - name: Build image with pi-gen (Docker)
        working-directory: pi-gen
        shell: bash
        run: |
          set -euo pipefail
          export PI_GEN_DEBUG=1
          sudo CLEAN=1 ./build-docker.sh -c ../config.effective

      - name: Show deploy contents
        shell: bash
        run: |
          echo "Contents of pi-gen/deploy:"
          ls -lah pi-gen/deploy || true

      - name: Remove work dir and show free space
        shell: bash
        run: |
          du -sh pi-gen/work || true
          sudo rm -rf pi-gen/work || true
          df -h

      - name: Upload artifacts (.img.xz)
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: versanode-os-${{ inputs.release_codename }}-${{ inputs.arch }}-${{ inputs.variant }}
          path: pi-gen/deploy/*.img.xz
          if-no-files-found: error
          compression-level: 9

      - name: Create GitHub Release (attach .img.xz)
        if: ${{ inputs.release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "versanode-os ${{ inputs.release_codename }} (${{ inputs.arch }}) — ${{ inputs.variant }}"
          draft: false
          prerelease: false
          tag_name: "build-${{ github.run_number }}"
          files: pi-gen/deploy/*.img.xz
