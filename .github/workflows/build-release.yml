name: VersaNode OS Build & Release (pi-gen)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to build (branch or tag)"
        default: "main"
        required: true
      release:
        description: "Publish GitHub Release?"
        type: boolean
        default: true
      upload_artifacts:
        description: "Upload build artifacts?"
        type: boolean
        default: true

      # ---- pi-gen config (replaces repo-root/config) ----
      img_name:
        description: "IMG_NAME"
        default: "versanode-os"
        required: true
      release_codename:
        description: "RELEASE (bookworm/trixie)"
        default: "trixie"
        required: true
      arch:
        description: "ARCH"
        default: "arm64"
        required: true

      enable_ssh:
        description: "ENABLE_SSH"
        type: boolean
        default: true
      pubkey_only_ssh:
        description: "PUBKEY_ONLY_SSH"
        type: boolean
        default: false

      first_user_name:
        description: "FIRST_USER_NAME"
        default: "versanode"
        required: true
      first_user_pass:
        description: "FIRST_USER_PASS"
        default: "versanode"
        required: true
      target_hostname:
        description: "TARGET_HOSTNAME"
        default: "versanode"
        required: true
      disable_first_boot_user_rename:
        description: "DISABLE_FIRST_BOOT_USER_RENAME"
        type: boolean
        default: true

      use_qemu:
        description: "USE_QEMU"
        type: boolean
        default: true
      deploy_compression:
        description: "DEPLOY_COMPRESSION"
        default: "xz"
        required: true
      compression_level:
        description: "COMPRESSION_LEVEL"
        default: "6"
        required: true

      stage_list:
        description: 'STAGE_LIST (space-separated; export-image will be added automatically if missing)'
        default: "stage0 stage1 stage2 stage8 stage9"
        required: true

concurrency:
  group: versanode-os-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🧹 Free up disk space (optimized)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: false
          dotnet: true
          haskell: false
          large-packages: false
          docker-images: true
          swap-storage: false

      - name: 📦 Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          submodules: recursive
          fetch-depth: 0

      - name: ⚙️ Install pi-gen host dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            coreutils quilt parted qemu-user-static debootstrap zerofree zip dosfstools e2fsprogs \
            libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc gpg pigz xxd bmap-tools \
            kpartx kmod arch-test ca-certificates

      - name: 🔍 Verify submodules present
        run: |
          set -euo pipefail
          [ -d pi-gen ] || { echo "pi-gen missing"; exit 2; }
          [ -d versanode-os-kmods ] || { echo "versanode-os-kmods missing"; exit 3; }
          [ -d versanode-os-usermods ] || { echo "versanode-os-usermods missing"; exit 4; }
          echo "✅ pi-gen, kmods, usermods present."

      - name: 🧩 Inject custom stages into pi-gen
        run: |
          set -euo pipefail
          rm -rf pi-gen/stage8 pi-gen/stage9
          cp -a versanode-os-kmods    pi-gen/stage8
          cp -a versanode-os-usermods pi-gen/stage9
          echo "✅ Injected versanode-os-kmods -> stage8"
          echo "✅ Injected versanode-os-usermods -> stage9"

          # Prevent early exports from stock stages (export only once at the end)
          touch pi-gen/stage3/SKIP || true
          touch pi-gen/stage4/SKIP || true
          touch pi-gen/stage5/SKIP || true
          touch pi-gen/stage2/SKIP_IMAGES || true
          touch pi-gen/stage4/SKIP_IMAGES || true
          touch pi-gen/stage5/SKIP_IMAGES || true

          # Export after our final custom stage (stage9)
          cat > pi-gen/stage9/EXPORT_IMAGE <<'EOF'
          IMG_SUFFIX=""
          if [ "${USE_QEMU}" = "1" ]; then
            IMG_SUFFIX="${IMG_SUFFIX}-qemu"
          fi
          EOF

      - name: 🛠️ Normalize endings & ensure exec bits (stage8 & stage9)
        run: |
          set -euo pipefail
          for s in stage8 stage9; do
            d="pi-gen/$s"
            [ -d "$d" ] || { echo "Missing $d"; exit 6; }

            # CRLF → LF on expected script files
            find "$d" -type f \( -name 'prerun.sh' -o -name '*-run.sh' -o -name '*-run-chroot.sh' \) \
              -exec sed -i 's/\r$//' {} \;

            # Ensure executables
            [ -f "$d/prerun.sh" ] && chmod +x "$d/prerun.sh" || true
            find "$d" -maxdepth 2 -type f -name '*-run.sh' -exec chmod +x {} \;
            find "$d" -maxdepth 2 -type f -name '*-run-chroot.sh' -exec chmod +x {} \;

            echo "---- $s directory listing ----"
            ls -l "$d" || true
            echo "---- $s/prerun.sh head ----"
            if [ -f "$d/prerun.sh" ]; then head -n 20 "$d/prerun.sh"; else echo "no prerun.sh"; fi

            echo "---- $s/*-run*.sh heads ----"
            for f in $(find "$d" -maxdepth 2 -type f -name '*-run*.sh' | sort); do
              echo "## $f"; head -n 10 "$f"; echo
            done
          done

      - name: 📝 Generate pi-gen config (from inputs)
        run: |
          set -euo pipefail

          # Map booleans (GitHub inputs are strings) to 1/0
          b2i() { [ "$1" = "true" ] && echo 1 || echo 0; }

          ENABLE_SSH=$(b2i "${{ inputs.enable_ssh }}")
          PUBKEY_ONLY_SSH=$(b2i "${{ inputs.pubkey_only_ssh }}")
          DISABLE_FIRST_BOOT_USER_RENAME=$(b2i "${{ inputs.disable_first_boot_user_rename }}")
          USE_QEMU=$(b2i "${{ inputs.use_qemu }}")

          # Ensure export-image is included once, at the end
          STAGES="${{ inputs.stage_list }}"
          case " $STAGES " in
            *" export-image "*) : ;;
            *) STAGES="$STAGES export-image" ;;
          esac

          cat > config <<EOF
          IMG_NAME=${{ inputs.img_name }}
          RELEASE=${{ inputs.release_codename }}
          ARCH=${{ inputs.arch }}

          ENABLE_SSH=${ENABLE_SSH}
          PUBKEY_ONLY_SSH=${PUBKEY_ONLY_SSH}
          FIRST_USER_NAME=${{ inputs.first_user_name }}
          FIRST_USER_PASS=${{ inputs.first_user_pass }}
          TARGET_HOSTNAME=${{ inputs.target_hostname }}
          DISABLE_FIRST_BOOT_USER_RENAME=${DISABLE_FIRST_BOOT_USER_RENAME}

          DEBIAN_FRONTEND=noninteractive
          APT_LISTCHANGES_FRONTEND=none

          STAGE_LIST="${STAGES}"

          USE_QEMU=${USE_QEMU}
          DEPLOY_COMPRESSION=${{ inputs.deploy_compression }}
          COMPRESSION_LEVEL=${{ inputs.compression_level }}
          EOF

          echo "---- generated config ----"
          sed -n '1,200p' config

      - name: 🧾 Show STAGE_LIST (sanity)
        run: |
          set -euo pipefail
          echo "Configured STAGE_LIST:"
          grep -E '^\s*STAGE_LIST=' config || true

      - name: 🏗️ Run pi-gen build (use generated config)
        env:
          PI_GEN_DEBUG: "1"
        run: |
          set -euo pipefail
          cd pi-gen
          sudo -E bash ./build.sh -c ../config

      - name: 📂 Collect build artifacts
        run: |
          mkdir -p artifacts
          cp -v pi-gen/deploy/*.{img,img.xz,bmap,sha256,zip} artifacts/ 2>/dev/null || true
          ls -lh artifacts || true

      - name: ⬆️ Upload artifacts
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: versanode-os-build-${{ github.run_number }}
          path: artifacts/*

      - name: 🚀 Create GitHub Release
        if: ${{ inputs.release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "VersaNode OS build ${{ github.run_number }}"
          tag_name: "build-${{ github.run_number }}"
          files: artifacts/*
          body: |
            Automated build of **VersaNode OS**
            - Ref: ${{ inputs.ref }}
            - Run ID: ${{ github.run_id }}
